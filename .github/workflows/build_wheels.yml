name: CMake

on:
  push:
    branches: [ main ]

jobs:
  win-build-1:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: ilammy/msvc-dev-cmd@v1
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    
    - name: Vcpkg
      run: |
        vcpkg install zlib:x64-windows
        vcpkg integrate install
      
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.12.1
      env:
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_BUILD: cp*
        
    - uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
  
  mac-build-1:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: install ninja
        run: |
          brew install gcc
          brew install ninja
          ls -l /usr/local/bin | grep g++
          ls -l /usr/local/bin | grep gcc

      - name: Build wheels1
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_BUILD: cp*
          CIBW_SKIP: cp38-*
          CIBW_ARCHS: x86_64 universal2 arm64
      
      - name: for py38
        run: |
          curl -o /tmp/Python38.pkg https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg
          sudo installer -pkg /tmp/Python38.pkg -target /
          sh "/Applications/Python 3.8/Install Certificates.command"

      - name: Build wheels2
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_BUILD: cp38-*
          CIBW_ARCHS: x86_64 universal2 arm64

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  Linux-build-1:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_ARCHS_LINUX: auto

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  Linux-build-2:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_ARCHS_LINUX: aarch64

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  Linux-build-3:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_ARCHS_LINUX: ppc64le

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  Linux-build-4:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_ARCHS_LINUX: s390x

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build SDist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz
    
  upload_all:
    needs: [win-build-1,mac-build-1,Linux-build-1,Linux-build-2,Linux-build-3,Linux-build-4, make_sdist]
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release')
    #if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}